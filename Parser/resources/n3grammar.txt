## document ::=		|	statements_optional EOF

## statements_optional ::=		|	statement  "."  statements_optional
##		|	void
		
## statement ::=		|	declaration
##		|	existential
##		|	simpleStatement
##		|	universal

## declaration ::=		|	 "@base"  explicituri
##		|	 "@keywords"  barename_csl
##		|	 "@prefix"  prefix explicituri
		
## existential ::=		|	 "@forSome"  symbol_csl

## simpleStatement ::=		|	subject propertylist

## universal ::=		|	 "@forAll"  symbol_csl

## explicituri ::=	<[^>]*>

## barename_csl ::=		|	barename barename_csl_tail
##		|	void
		
## barename ::=	[A-Z_a-z#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x02ff#x0370-#x037d#x037f-#x1fff#x200c-#x200d#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff][\-0-9A-Z_a-z#x00b7#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x037d#x037f-#x1fff#x200c-#x200d#x203f-#x2040#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff]*

## prefix ::=	([A-Z_a-z#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x02ff#x0370-#x037d#x037f-#x1fff#x200c-#x200d#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff][\-0-9A-Z_a-z#x00b7#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x037d#x037f-#x1fff#x200c-#x200d#x203f-#x2040#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff]*)?:

## symbol_csl ::=		|	symbol symbol_csl_tail
##		|	void

## subject ::=		|	expression

## propertylist ::=		|	predicate object objecttail propertylisttail
##		|	void

## barename_csl_tail ::=		|	 ","  barename barename_csl_tail
##		|	void
		
## symbol ::=		|	explicituri
##		|	qname

## symbol_csl_tail ::=		|	 ","  symbol symbol_csl_tail
##		|	void

## expression ::=		|	pathitem pathtail

## predicate ::=		|	 "<=" 
##		|	 "=" 
##		|	 "=>" 
##		|	 "@a" 
##		|	 "@has"  expression
##		|	 "@is"  expression  "@of" 
##		|	expression
		
## object ::=		|	expression

## objecttail ::=		|	 ","  object objecttail
##		|	void
		
## propertylisttail ::=		|	 ";"  propertylist
##		|	void

## qname ::=	(([A-Z_a-z#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x02ff#x0370-#x037d#x037f-#x1fff#x200c-#x200d#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff][\-0-9A-Z_a-z#x00b7#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x037d#x037f-#x1fff#x200c-#x200d#x203f-#x2040#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff]*)?:)?[A-Z_a-z#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x02ff#x0370-#x037d#x037f-#x1fff#x200c-#x200d#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff][\-0-9A-Z_a-z#x00b7#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x037d#x037f-#x1fff#x200c-#x200d#x203f-#x2040#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff]*

## pathitem ::=		|	 "("  pathlist  ")" 
##		|	 "["  propertylist  "]" 
##		|	 "{"  formulacontent  "}" 
##		|	boolean
##		|	literal
##		|	numericliteral
##		|	quickvariable
##		|	symbol

## pathtail ::=		|	 "!"  expression
##		|	 "^"  expression
##		|	void
		
## pathlist ::=		|	expression pathlist
##		|	void
		
## formulacontent ::=		|	statementlist

## boolean ::=		|	 "@false" 
##		|	 "@true" 

## literal ::=		|	string dtlang

## numericliteral ::=		|	decimal
##		|	double
##		|	integer
##		|	rational
		
## quickvariable ::=	\?[A-Z_a-z#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x02ff#x0370-#x037d#x037f-#x1fff#x200c-#x200d#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff][\-0-9A-Z_a-z#x00b7#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x037d#x037f-#x1fff#x200c-#x200d#x203f-#x2040#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff]*

## statementlist ::=		|	statement statementtail
##		|	void

## statementtail ::=		|	 "."  statementlist
		|	void
		
## string ::=	("""[^"\\]*(?:(?:\\.|"(?!""))[^"\\]*)*""")|("[^"\\]*(?:\\.[^"\\]*)*")

## dtlang ::=		|	 "@"  langcode
##		|	 "^^"  symbol
##		|	void

## decimal ::=	[-+]?[0-9]+(\.[0-9]+)?

## double ::=	[-+]?[0-9]+(\.[0-9]+)?([eE][-+]?[0-9]+)

## integer ::=	[-+]?[0-9]+

## rational ::=		|	integer  "/"  unsignedint

## langcode ::=	[a-z]+(-[a-z0-9]+)*

## unsignedint ::=	[0-9]+


	
ref:
=================

# barename ::=	[A-Z_a-z#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x02ff#x0370-#x037d#x037f-#x1fff#x200c-#x200d#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff][\-0-9A-Z_a-z#x00b7#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x037d#x037f-#x1fff#x200c-#x200d#x203f-#x2040#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff]*
# barename_csl ::=		|	barename barename_csl_tail
#		|	void
# barename_csl_tail ::=		|	 ","  barename barename_csl_tail
#		|	void
# boolean ::=		|	 "@false" 
#		|	 "@true" 
# decimal ::=	[-+]?[0-9]+(\.[0-9]+)?
# declaration ::=		|	 "@base"  explicituri
#		|	 "@keywords"  barename_csl
#		|	 "@prefix"  prefix explicituri
# document ::=		|	statements_optional EOF
# double ::=	[-+]?[0-9]+(\.[0-9]+)?([eE][-+]?[0-9]+)
# dtlang ::=		|	 "@"  langcode
#		|	 "^^"  symbol
#		|	void
# existential ::=		|	 "@forSome"  symbol_csl
# explicituri ::=	<[^>]*>
# expression ::=		|	pathitem pathtail
# formulacontent ::=		|	statementlist
# integer ::=	[-+]?[0-9]+
# langcode ::=	[a-z]+(-[a-z0-9]+)*
# literal ::=		|	string dtlang
# numericliteral ::=		|	decimal
#		|	double
#		|	integer
#		|	rational
# object ::=		|	expression
# objecttail ::=		|	 ","  object objecttail
#		|	void
# pathitem ::=		|	 "("  pathlist  ")" 
#		|	 "["  propertylist  "]" 
#		|	 "{"  formulacontent  "}" 
#		|	boolean
#		|	literal
#		|	numericliteral
#		|	quickvariable
#		|	symbol
# pathlist ::=		|	expression pathlist
#		|	void
# pathtail ::=		|	 "!"  expression
#		|	 "^"  expression
#		|	void
# predicate ::=		|	 "<=" 
#		|	 "=" 
#		|	 "=>" 
#		|	 "@a" 
#		|	 "@has"  expression
#		|	 "@is"  expression  "@of" 
#		|	expression
# prefix ::=	([A-Z_a-z#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x02ff#x0370-#x037d#x037f-#x1fff#x200c-#x200d#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff][\-0-9A-Z_a-z#x00b7#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x037d#x037f-#x1fff#x200c-#x200d#x203f-#x2040#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff]*)?:
# propertylist ::=		|	predicate object objecttail propertylisttail
#		|	void
# propertylisttail ::=		|	 ";"  propertylist
#		|	void
# qname ::=	(([A-Z_a-z#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x02ff#x0370-#x037d#x037f-#x1fff#x200c-#x200d#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff][\-0-9A-Z_a-z#x00b7#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x037d#x037f-#x1fff#x200c-#x200d#x203f-#x2040#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff]*)?:)?[A-Z_a-z#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x02ff#x0370-#x037d#x037f-#x1fff#x200c-#x200d#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff][\-0-9A-Z_a-z#x00b7#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x037d#x037f-#x1fff#x200c-#x200d#x203f-#x2040#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff]*
# quickvariable ::=	\?[A-Z_a-z#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x02ff#x0370-#x037d#x037f-#x1fff#x200c-#x200d#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff][\-0-9A-Z_a-z#x00b7#x00c0-#x00d6#x00d8-#x00f6#x00f8-#x037d#x037f-#x1fff#x200c-#x200d#x203f-#x2040#x2070-#x218f#x2c00-#x2fef#x3001-#xd7ff#xf900-#xfdcf#xfdf0-#xfffd#x00010000-#x000effff]*
# rational ::=		|	integer  "/"  unsignedint
# simpleStatement ::=		|	subject propertylist
# statement ::=		|	declaration
#		|	existential
#		|	simpleStatement
# 		|	universal
# statementlist ::=		|	statement statementtail
#		|	void
# statements_optional ::=		|	statement  "."  statements_optional
#		|	void
# statementtail ::=		|	 "."  statementlist
#		|	void
# string ::=	("""[^"\\]*(?:(?:\\.|"(?!""))[^"\\]*)*""")|("[^"\\]*(?:\\.[^"\\]*)*")
# subject ::=		|	expression
# symbol ::=		|	explicituri
#		|	qname
# symbol_csl ::=		|	symbol symbol_csl_tail
#		|	void
# symbol_csl_tail ::=		|	 ","  symbol symbol_csl_tail
#		|	void
# universal ::=		|	 "@forAll"  symbol_csl
# unsignedint ::=	[0-9]+
